package state

import (
	"github.com/eigerco/strawberry/internal/block"
	"github.com/eigerco/strawberry/internal/jamtime"
	"github.com/eigerco/strawberry/internal/safrole"
)

// TODO: These calculations are just mocks for now. They will be replaced with actual calculations when the state transitions are implemented.

// Intermediate State Calculation Functions

// calculateIntermediateBlockState Equation 17: Œ≤‚Ä† ‚â∫ (H, Œ≤)
func calculateIntermediateBlockState(header block.Header, previousRecentBlocks []BlockState) []BlockState {
	return []BlockState{}
}

// calculateIntermediateServiceState Equation 24: Œ¥‚Ä† ‚â∫ (EP, Œ¥, œÑ‚Ä≤)
func calculateIntermediateServiceState(preimages block.PreimageExtrinsic, serviceState ServiceState, timeslot jamtime.Timeslot) ServiceState {
	return make(ServiceState)
}

// calculateIntermediateCoreAssignmentsFromExtrinsics Equation 25: œÅ‚Ä† ‚â∫ (ED , œÅ)
func calculateIntermediateCoreAssignmentsFromExtrinsics(disputes block.DisputeExtrinsic, coreAssignments CoreAssignments) CoreAssignments {
	return CoreAssignments{}
}

// calculateIntermediateCoreAssignmentsFromAvailability Equation 26: œÅ‚Ä° ‚â∫ (EA, œÅ‚Ä†)
func calculateIntermediateCoreAssignmentsFromAvailability(assurances block.AssurancesExtrinsic, coreAssignments CoreAssignments) CoreAssignments {
	return CoreAssignments{}
}

// Final State Calculation Functions

// calculateNewTimeState Equation 16: œÑ‚Ä≤ ‚â∫ H
func calculateNewTimeState(header block.Header) jamtime.Timeslot {
	return header.TimeSlotIndex
}

// calculateNewRecentBlocks Equation 18: Œ≤‚Ä≤ ‚â∫ (H, EG, Œ≤‚Ä†, C)
func calculateNewRecentBlocks(header block.Header, guarantees block.GuaranteesExtrinsic, intermediateRecentBlocks []BlockState, context Context) []BlockState {
	return []BlockState{}
}

// calculateNewSafroleState Equation 19: Œ≥‚Ä≤ ‚â∫ (H, œÑ, ET , Œ≥, Œπ, Œ∑‚Ä≤, Œ∫‚Ä≤)
func calculateNewSafroleState(header block.Header, timeslot jamtime.Timeslot, tickets block.TicketExtrinsic, nextValidators safrole.ValidatorsData, queuedValidators safrole.ValidatorsData, newEntropyPool EntropyPool, newValidators safrole.ValidatorsData) safrole.State {
	return safrole.State{}
}

// calculateNewEntropyPool Equation 20: Œ∑‚Ä≤ ‚â∫ (H, œÑ, Œ∑)
func calculateNewEntropyPool(header block.Header, timeslot jamtime.Timeslot, entropyPool EntropyPool) EntropyPool {
	return EntropyPool{}
}

// calculateNewCoreAuthorizations Equation 29: Œ±' ‚â∫ (EG, œÜ', Œ±)
func calculateNewCoreAuthorizations(guarantees block.GuaranteesExtrinsic, pendingCoreAuthorizations PendingAuthorizersQueues, coreAuthorizations CoreAuthorizersPool) CoreAuthorizersPool {
	return CoreAuthorizersPool{}
}

// calculateNewValidators Equation 21: Œ∫‚Ä≤ ‚â∫ (H, œÑ, Œ∫, Œ≥, œà‚Ä≤)
func calculateNewValidators(header block.Header, timeslot jamtime.Timeslot, validators safrole.ValidatorsData, nextValidators safrole.ValidatorsData, judgements Judgements) safrole.ValidatorsData {
	return safrole.ValidatorsData{}
}

// calculateNewJudgements Equation 23: œà‚Ä≤ ‚â∫ (ED, œà)
func calculateNewJudgements(disputes block.DisputeExtrinsic, stateJudgements Judgements) Judgements {
	return Judgements{}
}

// calculateNewCoreAssignments Equation 27: œÅ‚Ä≤ ‚â∫ (EG, œÅ‚Ä°, Œ∫, œÑ‚Ä≤)
func calculateNewCoreAssignments(guarantees block.GuaranteesExtrinsic, coreAssignments CoreAssignments, validators safrole.ValidatorsData, timeslot jamtime.Timeslot) CoreAssignments {
	return CoreAssignments{}
}

// calculateNewArchivedValidators Equation 22: Œª‚Ä≤ ‚â∫ (H, œÑ, Œª, Œ∫)
func calculateNewArchivedValidators(header block.Header, timeslot jamtime.Timeslot, archivedValidators safrole.ValidatorsData, validators safrole.ValidatorsData) safrole.ValidatorsData {
	return safrole.ValidatorsData{}
}

// calculateServiceState Equation 28: Œ¥‚Ä≤, ùùå‚Ä≤, Œπ‚Ä≤, œÜ‚Ä≤, C ‚â∫ (EA, œÅ‚Ä≤, Œ¥‚Ä†, ùùå, Œπ, œÜ)
func calculateServiceState(assurances block.AssurancesExtrinsic, coreAssignments CoreAssignments, intermediateServiceState ServiceState, privilegedServices PrivilegedServices, queuedValidators safrole.ValidatorsData, coreAuthorizationQueue PendingAuthorizersQueues) (ServiceState, PrivilegedServices, safrole.ValidatorsData, PendingAuthorizersQueues, Context) {
	return make(ServiceState), PrivilegedServices{}, safrole.ValidatorsData{}, PendingAuthorizersQueues{}, Context{}
}

// calculateNewValidatorStatistics Equation 30: œÄ‚Ä≤ ‚â∫ (EG, EP, EA, ET, œÑ, œÑ‚Ä≤, œÄ)
func calculateNewValidatorStatistics(extrinsics block.Extrinsic, timeslot jamtime.Timeslot, newTimeSlot jamtime.Timeslot, validatorStatistics ValidatorStatisticsState) ValidatorStatisticsState {
	return ValidatorStatisticsState{}
}
