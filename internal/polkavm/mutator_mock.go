// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/eigerco/strawberry/internal/polkavm (interfaces: Mutator)

// Package polkavm is a generated GoMock package.
package polkavm

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMutator is a mock of Mutator interface.
type MockMutator struct {
	ctrl     *gomock.Controller
	recorder *MockMutatorMockRecorder
}

// MockMutatorMockRecorder is the mock recorder for MockMutator.
type MockMutatorMockRecorder struct {
	mock *MockMutator
}

// NewMockMutator creates a new mock instance.
func NewMockMutator(ctrl *gomock.Controller) *MockMutator {
	mock := &MockMutator{ctrl: ctrl}
	mock.recorder = &MockMutatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMutator) EXPECT() *MockMutatorMockRecorder {
	return m.recorder
}

// Add32 mocks base method.
func (m *MockMutator) Add32(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add32", arg0, arg1, arg2)
}

// Add32 indicates an expected call of Add32.
func (mr *MockMutatorMockRecorder) Add32(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add32", reflect.TypeOf((*MockMutator)(nil).Add32), arg0, arg1, arg2)
}

// Add64 mocks base method.
func (m *MockMutator) Add64(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add64", arg0, arg1, arg2)
}

// Add64 indicates an expected call of Add64.
func (mr *MockMutatorMockRecorder) Add64(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add64", reflect.TypeOf((*MockMutator)(nil).Add64), arg0, arg1, arg2)
}

// AddImm32 mocks base method.
func (m *MockMutator) AddImm32(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddImm32", arg0, arg1, arg2)
}

// AddImm32 indicates an expected call of AddImm32.
func (mr *MockMutatorMockRecorder) AddImm32(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddImm32", reflect.TypeOf((*MockMutator)(nil).AddImm32), arg0, arg1, arg2)
}

// AddImm64 mocks base method.
func (m *MockMutator) AddImm64(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddImm64", arg0, arg1, arg2)
}

// AddImm64 indicates an expected call of AddImm64.
func (mr *MockMutatorMockRecorder) AddImm64(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddImm64", reflect.TypeOf((*MockMutator)(nil).AddImm64), arg0, arg1, arg2)
}

// And mocks base method.
func (m *MockMutator) And(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "And", arg0, arg1, arg2)
}

// And indicates an expected call of And.
func (mr *MockMutatorMockRecorder) And(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "And", reflect.TypeOf((*MockMutator)(nil).And), arg0, arg1, arg2)
}

// AndImm mocks base method.
func (m *MockMutator) AndImm(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AndImm", arg0, arg1, arg2)
}

// AndImm indicates an expected call of AndImm.
func (mr *MockMutatorMockRecorder) AndImm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AndImm", reflect.TypeOf((*MockMutator)(nil).AndImm), arg0, arg1, arg2)
}

// AndInv mocks base method.
func (m *MockMutator) AndInv(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AndInv", arg0, arg1, arg2)
}

// AndInv indicates an expected call of AndInv.
func (mr *MockMutatorMockRecorder) AndInv(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AndInv", reflect.TypeOf((*MockMutator)(nil).AndInv), arg0, arg1, arg2)
}

// BranchEq mocks base method.
func (m *MockMutator) BranchEq(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BranchEq", arg0, arg1, arg2)
}

// BranchEq indicates an expected call of BranchEq.
func (mr *MockMutatorMockRecorder) BranchEq(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BranchEq", reflect.TypeOf((*MockMutator)(nil).BranchEq), arg0, arg1, arg2)
}

// BranchEqImm mocks base method.
func (m *MockMutator) BranchEqImm(arg0 Reg, arg1, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BranchEqImm", arg0, arg1, arg2)
}

// BranchEqImm indicates an expected call of BranchEqImm.
func (mr *MockMutatorMockRecorder) BranchEqImm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BranchEqImm", reflect.TypeOf((*MockMutator)(nil).BranchEqImm), arg0, arg1, arg2)
}

// BranchGreaterOrEqualSigned mocks base method.
func (m *MockMutator) BranchGreaterOrEqualSigned(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BranchGreaterOrEqualSigned", arg0, arg1, arg2)
}

// BranchGreaterOrEqualSigned indicates an expected call of BranchGreaterOrEqualSigned.
func (mr *MockMutatorMockRecorder) BranchGreaterOrEqualSigned(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BranchGreaterOrEqualSigned", reflect.TypeOf((*MockMutator)(nil).BranchGreaterOrEqualSigned), arg0, arg1, arg2)
}

// BranchGreaterOrEqualSignedImm mocks base method.
func (m *MockMutator) BranchGreaterOrEqualSignedImm(arg0 Reg, arg1, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BranchGreaterOrEqualSignedImm", arg0, arg1, arg2)
}

// BranchGreaterOrEqualSignedImm indicates an expected call of BranchGreaterOrEqualSignedImm.
func (mr *MockMutatorMockRecorder) BranchGreaterOrEqualSignedImm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BranchGreaterOrEqualSignedImm", reflect.TypeOf((*MockMutator)(nil).BranchGreaterOrEqualSignedImm), arg0, arg1, arg2)
}

// BranchGreaterOrEqualUnsigned mocks base method.
func (m *MockMutator) BranchGreaterOrEqualUnsigned(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BranchGreaterOrEqualUnsigned", arg0, arg1, arg2)
}

// BranchGreaterOrEqualUnsigned indicates an expected call of BranchGreaterOrEqualUnsigned.
func (mr *MockMutatorMockRecorder) BranchGreaterOrEqualUnsigned(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BranchGreaterOrEqualUnsigned", reflect.TypeOf((*MockMutator)(nil).BranchGreaterOrEqualUnsigned), arg0, arg1, arg2)
}

// BranchGreaterOrEqualUnsignedImm mocks base method.
func (m *MockMutator) BranchGreaterOrEqualUnsignedImm(arg0 Reg, arg1, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BranchGreaterOrEqualUnsignedImm", arg0, arg1, arg2)
}

// BranchGreaterOrEqualUnsignedImm indicates an expected call of BranchGreaterOrEqualUnsignedImm.
func (mr *MockMutatorMockRecorder) BranchGreaterOrEqualUnsignedImm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BranchGreaterOrEqualUnsignedImm", reflect.TypeOf((*MockMutator)(nil).BranchGreaterOrEqualUnsignedImm), arg0, arg1, arg2)
}

// BranchGreaterSignedImm mocks base method.
func (m *MockMutator) BranchGreaterSignedImm(arg0 Reg, arg1, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BranchGreaterSignedImm", arg0, arg1, arg2)
}

// BranchGreaterSignedImm indicates an expected call of BranchGreaterSignedImm.
func (mr *MockMutatorMockRecorder) BranchGreaterSignedImm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BranchGreaterSignedImm", reflect.TypeOf((*MockMutator)(nil).BranchGreaterSignedImm), arg0, arg1, arg2)
}

// BranchGreaterUnsignedImm mocks base method.
func (m *MockMutator) BranchGreaterUnsignedImm(arg0 Reg, arg1, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BranchGreaterUnsignedImm", arg0, arg1, arg2)
}

// BranchGreaterUnsignedImm indicates an expected call of BranchGreaterUnsignedImm.
func (mr *MockMutatorMockRecorder) BranchGreaterUnsignedImm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BranchGreaterUnsignedImm", reflect.TypeOf((*MockMutator)(nil).BranchGreaterUnsignedImm), arg0, arg1, arg2)
}

// BranchLessOrEqualSignedImm mocks base method.
func (m *MockMutator) BranchLessOrEqualSignedImm(arg0 Reg, arg1, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BranchLessOrEqualSignedImm", arg0, arg1, arg2)
}

// BranchLessOrEqualSignedImm indicates an expected call of BranchLessOrEqualSignedImm.
func (mr *MockMutatorMockRecorder) BranchLessOrEqualSignedImm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BranchLessOrEqualSignedImm", reflect.TypeOf((*MockMutator)(nil).BranchLessOrEqualSignedImm), arg0, arg1, arg2)
}

// BranchLessOrEqualUnsignedImm mocks base method.
func (m *MockMutator) BranchLessOrEqualUnsignedImm(arg0 Reg, arg1, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BranchLessOrEqualUnsignedImm", arg0, arg1, arg2)
}

// BranchLessOrEqualUnsignedImm indicates an expected call of BranchLessOrEqualUnsignedImm.
func (mr *MockMutatorMockRecorder) BranchLessOrEqualUnsignedImm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BranchLessOrEqualUnsignedImm", reflect.TypeOf((*MockMutator)(nil).BranchLessOrEqualUnsignedImm), arg0, arg1, arg2)
}

// BranchLessSigned mocks base method.
func (m *MockMutator) BranchLessSigned(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BranchLessSigned", arg0, arg1, arg2)
}

// BranchLessSigned indicates an expected call of BranchLessSigned.
func (mr *MockMutatorMockRecorder) BranchLessSigned(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BranchLessSigned", reflect.TypeOf((*MockMutator)(nil).BranchLessSigned), arg0, arg1, arg2)
}

// BranchLessSignedImm mocks base method.
func (m *MockMutator) BranchLessSignedImm(arg0 Reg, arg1, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BranchLessSignedImm", arg0, arg1, arg2)
}

// BranchLessSignedImm indicates an expected call of BranchLessSignedImm.
func (mr *MockMutatorMockRecorder) BranchLessSignedImm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BranchLessSignedImm", reflect.TypeOf((*MockMutator)(nil).BranchLessSignedImm), arg0, arg1, arg2)
}

// BranchLessUnsigned mocks base method.
func (m *MockMutator) BranchLessUnsigned(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BranchLessUnsigned", arg0, arg1, arg2)
}

// BranchLessUnsigned indicates an expected call of BranchLessUnsigned.
func (mr *MockMutatorMockRecorder) BranchLessUnsigned(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BranchLessUnsigned", reflect.TypeOf((*MockMutator)(nil).BranchLessUnsigned), arg0, arg1, arg2)
}

// BranchLessUnsignedImm mocks base method.
func (m *MockMutator) BranchLessUnsignedImm(arg0 Reg, arg1, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BranchLessUnsignedImm", arg0, arg1, arg2)
}

// BranchLessUnsignedImm indicates an expected call of BranchLessUnsignedImm.
func (mr *MockMutatorMockRecorder) BranchLessUnsignedImm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BranchLessUnsignedImm", reflect.TypeOf((*MockMutator)(nil).BranchLessUnsignedImm), arg0, arg1, arg2)
}

// BranchNotEq mocks base method.
func (m *MockMutator) BranchNotEq(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BranchNotEq", arg0, arg1, arg2)
}

// BranchNotEq indicates an expected call of BranchNotEq.
func (mr *MockMutatorMockRecorder) BranchNotEq(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BranchNotEq", reflect.TypeOf((*MockMutator)(nil).BranchNotEq), arg0, arg1, arg2)
}

// BranchNotEqImm mocks base method.
func (m *MockMutator) BranchNotEqImm(arg0 Reg, arg1, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BranchNotEqImm", arg0, arg1, arg2)
}

// BranchNotEqImm indicates an expected call of BranchNotEqImm.
func (mr *MockMutatorMockRecorder) BranchNotEqImm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BranchNotEqImm", reflect.TypeOf((*MockMutator)(nil).BranchNotEqImm), arg0, arg1, arg2)
}

// CmovIfNotZero mocks base method.
func (m *MockMutator) CmovIfNotZero(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmovIfNotZero", arg0, arg1, arg2)
}

// CmovIfNotZero indicates an expected call of CmovIfNotZero.
func (mr *MockMutatorMockRecorder) CmovIfNotZero(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmovIfNotZero", reflect.TypeOf((*MockMutator)(nil).CmovIfNotZero), arg0, arg1, arg2)
}

// CmovIfNotZeroImm mocks base method.
func (m *MockMutator) CmovIfNotZeroImm(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmovIfNotZeroImm", arg0, arg1, arg2)
}

// CmovIfNotZeroImm indicates an expected call of CmovIfNotZeroImm.
func (mr *MockMutatorMockRecorder) CmovIfNotZeroImm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmovIfNotZeroImm", reflect.TypeOf((*MockMutator)(nil).CmovIfNotZeroImm), arg0, arg1, arg2)
}

// CmovIfZero mocks base method.
func (m *MockMutator) CmovIfZero(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmovIfZero", arg0, arg1, arg2)
}

// CmovIfZero indicates an expected call of CmovIfZero.
func (mr *MockMutatorMockRecorder) CmovIfZero(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmovIfZero", reflect.TypeOf((*MockMutator)(nil).CmovIfZero), arg0, arg1, arg2)
}

// CmovIfZeroImm mocks base method.
func (m *MockMutator) CmovIfZeroImm(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CmovIfZeroImm", arg0, arg1, arg2)
}

// CmovIfZeroImm indicates an expected call of CmovIfZeroImm.
func (mr *MockMutatorMockRecorder) CmovIfZeroImm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CmovIfZeroImm", reflect.TypeOf((*MockMutator)(nil).CmovIfZeroImm), arg0, arg1, arg2)
}

// CountSetBits32 mocks base method.
func (m *MockMutator) CountSetBits32(arg0, arg1 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CountSetBits32", arg0, arg1)
}

// CountSetBits32 indicates an expected call of CountSetBits32.
func (mr *MockMutatorMockRecorder) CountSetBits32(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSetBits32", reflect.TypeOf((*MockMutator)(nil).CountSetBits32), arg0, arg1)
}

// CountSetBits64 mocks base method.
func (m *MockMutator) CountSetBits64(arg0, arg1 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CountSetBits64", arg0, arg1)
}

// CountSetBits64 indicates an expected call of CountSetBits64.
func (mr *MockMutatorMockRecorder) CountSetBits64(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountSetBits64", reflect.TypeOf((*MockMutator)(nil).CountSetBits64), arg0, arg1)
}

// DivSigned32 mocks base method.
func (m *MockMutator) DivSigned32(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DivSigned32", arg0, arg1, arg2)
}

// DivSigned32 indicates an expected call of DivSigned32.
func (mr *MockMutatorMockRecorder) DivSigned32(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DivSigned32", reflect.TypeOf((*MockMutator)(nil).DivSigned32), arg0, arg1, arg2)
}

// DivSigned64 mocks base method.
func (m *MockMutator) DivSigned64(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DivSigned64", arg0, arg1, arg2)
}

// DivSigned64 indicates an expected call of DivSigned64.
func (mr *MockMutatorMockRecorder) DivSigned64(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DivSigned64", reflect.TypeOf((*MockMutator)(nil).DivSigned64), arg0, arg1, arg2)
}

// DivUnsigned32 mocks base method.
func (m *MockMutator) DivUnsigned32(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DivUnsigned32", arg0, arg1, arg2)
}

// DivUnsigned32 indicates an expected call of DivUnsigned32.
func (mr *MockMutatorMockRecorder) DivUnsigned32(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DivUnsigned32", reflect.TypeOf((*MockMutator)(nil).DivUnsigned32), arg0, arg1, arg2)
}

// DivUnsigned64 mocks base method.
func (m *MockMutator) DivUnsigned64(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DivUnsigned64", arg0, arg1, arg2)
}

// DivUnsigned64 indicates an expected call of DivUnsigned64.
func (mr *MockMutatorMockRecorder) DivUnsigned64(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DivUnsigned64", reflect.TypeOf((*MockMutator)(nil).DivUnsigned64), arg0, arg1, arg2)
}

// Fallthrough mocks base method.
func (m *MockMutator) Fallthrough() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Fallthrough")
}

// Fallthrough indicates an expected call of Fallthrough.
func (mr *MockMutatorMockRecorder) Fallthrough() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fallthrough", reflect.TypeOf((*MockMutator)(nil).Fallthrough))
}

// Jump mocks base method.
func (m *MockMutator) Jump(arg0 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Jump", arg0)
}

// Jump indicates an expected call of Jump.
func (mr *MockMutatorMockRecorder) Jump(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Jump", reflect.TypeOf((*MockMutator)(nil).Jump), arg0)
}

// JumpIndirect mocks base method.
func (m *MockMutator) JumpIndirect(arg0 Reg, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JumpIndirect", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// JumpIndirect indicates an expected call of JumpIndirect.
func (mr *MockMutatorMockRecorder) JumpIndirect(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JumpIndirect", reflect.TypeOf((*MockMutator)(nil).JumpIndirect), arg0, arg1)
}

// LeadingZeroBits32 mocks base method.
func (m *MockMutator) LeadingZeroBits32(arg0, arg1 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LeadingZeroBits32", arg0, arg1)
}

// LeadingZeroBits32 indicates an expected call of LeadingZeroBits32.
func (mr *MockMutatorMockRecorder) LeadingZeroBits32(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeadingZeroBits32", reflect.TypeOf((*MockMutator)(nil).LeadingZeroBits32), arg0, arg1)
}

// LeadingZeroBits64 mocks base method.
func (m *MockMutator) LeadingZeroBits64(arg0, arg1 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LeadingZeroBits64", arg0, arg1)
}

// LeadingZeroBits64 indicates an expected call of LeadingZeroBits64.
func (mr *MockMutatorMockRecorder) LeadingZeroBits64(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LeadingZeroBits64", reflect.TypeOf((*MockMutator)(nil).LeadingZeroBits64), arg0, arg1)
}

// LoadI16 mocks base method.
func (m *MockMutator) LoadI16(arg0 Reg, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadI16", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadI16 indicates an expected call of LoadI16.
func (mr *MockMutatorMockRecorder) LoadI16(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadI16", reflect.TypeOf((*MockMutator)(nil).LoadI16), arg0, arg1)
}

// LoadI32 mocks base method.
func (m *MockMutator) LoadI32(arg0 Reg, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadI32", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadI32 indicates an expected call of LoadI32.
func (mr *MockMutatorMockRecorder) LoadI32(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadI32", reflect.TypeOf((*MockMutator)(nil).LoadI32), arg0, arg1)
}

// LoadI8 mocks base method.
func (m *MockMutator) LoadI8(arg0 Reg, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadI8", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadI8 indicates an expected call of LoadI8.
func (mr *MockMutatorMockRecorder) LoadI8(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadI8", reflect.TypeOf((*MockMutator)(nil).LoadI8), arg0, arg1)
}

// LoadImm mocks base method.
func (m *MockMutator) LoadImm(arg0 Reg, arg1 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LoadImm", arg0, arg1)
}

// LoadImm indicates an expected call of LoadImm.
func (mr *MockMutatorMockRecorder) LoadImm(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadImm", reflect.TypeOf((*MockMutator)(nil).LoadImm), arg0, arg1)
}

// LoadImm64 mocks base method.
func (m *MockMutator) LoadImm64(arg0 Reg, arg1 uint64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LoadImm64", arg0, arg1)
}

// LoadImm64 indicates an expected call of LoadImm64.
func (mr *MockMutatorMockRecorder) LoadImm64(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadImm64", reflect.TypeOf((*MockMutator)(nil).LoadImm64), arg0, arg1)
}

// LoadImmAndJump mocks base method.
func (m *MockMutator) LoadImmAndJump(arg0 Reg, arg1, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LoadImmAndJump", arg0, arg1, arg2)
}

// LoadImmAndJump indicates an expected call of LoadImmAndJump.
func (mr *MockMutatorMockRecorder) LoadImmAndJump(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadImmAndJump", reflect.TypeOf((*MockMutator)(nil).LoadImmAndJump), arg0, arg1, arg2)
}

// LoadImmAndJumpIndirect mocks base method.
func (m *MockMutator) LoadImmAndJumpIndirect(arg0, arg1 Reg, arg2, arg3 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadImmAndJumpIndirect", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadImmAndJumpIndirect indicates an expected call of LoadImmAndJumpIndirect.
func (mr *MockMutatorMockRecorder) LoadImmAndJumpIndirect(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadImmAndJumpIndirect", reflect.TypeOf((*MockMutator)(nil).LoadImmAndJumpIndirect), arg0, arg1, arg2, arg3)
}

// LoadIndirectI16 mocks base method.
func (m *MockMutator) LoadIndirectI16(arg0, arg1 Reg, arg2 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadIndirectI16", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadIndirectI16 indicates an expected call of LoadIndirectI16.
func (mr *MockMutatorMockRecorder) LoadIndirectI16(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadIndirectI16", reflect.TypeOf((*MockMutator)(nil).LoadIndirectI16), arg0, arg1, arg2)
}

// LoadIndirectI32 mocks base method.
func (m *MockMutator) LoadIndirectI32(arg0, arg1 Reg, arg2 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadIndirectI32", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadIndirectI32 indicates an expected call of LoadIndirectI32.
func (mr *MockMutatorMockRecorder) LoadIndirectI32(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadIndirectI32", reflect.TypeOf((*MockMutator)(nil).LoadIndirectI32), arg0, arg1, arg2)
}

// LoadIndirectI8 mocks base method.
func (m *MockMutator) LoadIndirectI8(arg0, arg1 Reg, arg2 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadIndirectI8", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadIndirectI8 indicates an expected call of LoadIndirectI8.
func (mr *MockMutatorMockRecorder) LoadIndirectI8(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadIndirectI8", reflect.TypeOf((*MockMutator)(nil).LoadIndirectI8), arg0, arg1, arg2)
}

// LoadIndirectU16 mocks base method.
func (m *MockMutator) LoadIndirectU16(arg0, arg1 Reg, arg2 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadIndirectU16", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadIndirectU16 indicates an expected call of LoadIndirectU16.
func (mr *MockMutatorMockRecorder) LoadIndirectU16(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadIndirectU16", reflect.TypeOf((*MockMutator)(nil).LoadIndirectU16), arg0, arg1, arg2)
}

// LoadIndirectU32 mocks base method.
func (m *MockMutator) LoadIndirectU32(arg0, arg1 Reg, arg2 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadIndirectU32", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadIndirectU32 indicates an expected call of LoadIndirectU32.
func (mr *MockMutatorMockRecorder) LoadIndirectU32(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadIndirectU32", reflect.TypeOf((*MockMutator)(nil).LoadIndirectU32), arg0, arg1, arg2)
}

// LoadIndirectU64 mocks base method.
func (m *MockMutator) LoadIndirectU64(arg0, arg1 Reg, arg2 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadIndirectU64", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadIndirectU64 indicates an expected call of LoadIndirectU64.
func (mr *MockMutatorMockRecorder) LoadIndirectU64(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadIndirectU64", reflect.TypeOf((*MockMutator)(nil).LoadIndirectU64), arg0, arg1, arg2)
}

// LoadIndirectU8 mocks base method.
func (m *MockMutator) LoadIndirectU8(arg0, arg1 Reg, arg2 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadIndirectU8", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadIndirectU8 indicates an expected call of LoadIndirectU8.
func (mr *MockMutatorMockRecorder) LoadIndirectU8(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadIndirectU8", reflect.TypeOf((*MockMutator)(nil).LoadIndirectU8), arg0, arg1, arg2)
}

// LoadU16 mocks base method.
func (m *MockMutator) LoadU16(arg0 Reg, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadU16", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadU16 indicates an expected call of LoadU16.
func (mr *MockMutatorMockRecorder) LoadU16(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadU16", reflect.TypeOf((*MockMutator)(nil).LoadU16), arg0, arg1)
}

// LoadU32 mocks base method.
func (m *MockMutator) LoadU32(arg0 Reg, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadU32", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadU32 indicates an expected call of LoadU32.
func (mr *MockMutatorMockRecorder) LoadU32(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadU32", reflect.TypeOf((*MockMutator)(nil).LoadU32), arg0, arg1)
}

// LoadU64 mocks base method.
func (m *MockMutator) LoadU64(arg0 Reg, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadU64", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadU64 indicates an expected call of LoadU64.
func (mr *MockMutatorMockRecorder) LoadU64(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadU64", reflect.TypeOf((*MockMutator)(nil).LoadU64), arg0, arg1)
}

// LoadU8 mocks base method.
func (m *MockMutator) LoadU8(arg0 Reg, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadU8", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadU8 indicates an expected call of LoadU8.
func (mr *MockMutatorMockRecorder) LoadU8(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadU8", reflect.TypeOf((*MockMutator)(nil).LoadU8), arg0, arg1)
}

// Max mocks base method.
func (m *MockMutator) Max(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Max", arg0, arg1, arg2)
}

// Max indicates an expected call of Max.
func (mr *MockMutatorMockRecorder) Max(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Max", reflect.TypeOf((*MockMutator)(nil).Max), arg0, arg1, arg2)
}

// MaxU mocks base method.
func (m *MockMutator) MaxU(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MaxU", arg0, arg1, arg2)
}

// MaxU indicates an expected call of MaxU.
func (mr *MockMutatorMockRecorder) MaxU(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MaxU", reflect.TypeOf((*MockMutator)(nil).MaxU), arg0, arg1, arg2)
}

// Min mocks base method.
func (m *MockMutator) Min(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Min", arg0, arg1, arg2)
}

// Min indicates an expected call of Min.
func (mr *MockMutatorMockRecorder) Min(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Min", reflect.TypeOf((*MockMutator)(nil).Min), arg0, arg1, arg2)
}

// MinU mocks base method.
func (m *MockMutator) MinU(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MinU", arg0, arg1, arg2)
}

// MinU indicates an expected call of MinU.
func (mr *MockMutatorMockRecorder) MinU(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MinU", reflect.TypeOf((*MockMutator)(nil).MinU), arg0, arg1, arg2)
}

// MoveReg mocks base method.
func (m *MockMutator) MoveReg(arg0, arg1 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MoveReg", arg0, arg1)
}

// MoveReg indicates an expected call of MoveReg.
func (mr *MockMutatorMockRecorder) MoveReg(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveReg", reflect.TypeOf((*MockMutator)(nil).MoveReg), arg0, arg1)
}

// Mul32 mocks base method.
func (m *MockMutator) Mul32(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Mul32", arg0, arg1, arg2)
}

// Mul32 indicates an expected call of Mul32.
func (mr *MockMutatorMockRecorder) Mul32(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mul32", reflect.TypeOf((*MockMutator)(nil).Mul32), arg0, arg1, arg2)
}

// Mul64 mocks base method.
func (m *MockMutator) Mul64(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Mul64", arg0, arg1, arg2)
}

// Mul64 indicates an expected call of Mul64.
func (mr *MockMutatorMockRecorder) Mul64(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mul64", reflect.TypeOf((*MockMutator)(nil).Mul64), arg0, arg1, arg2)
}

// MulImm32 mocks base method.
func (m *MockMutator) MulImm32(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MulImm32", arg0, arg1, arg2)
}

// MulImm32 indicates an expected call of MulImm32.
func (mr *MockMutatorMockRecorder) MulImm32(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MulImm32", reflect.TypeOf((*MockMutator)(nil).MulImm32), arg0, arg1, arg2)
}

// MulImm64 mocks base method.
func (m *MockMutator) MulImm64(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MulImm64", arg0, arg1, arg2)
}

// MulImm64 indicates an expected call of MulImm64.
func (mr *MockMutatorMockRecorder) MulImm64(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MulImm64", reflect.TypeOf((*MockMutator)(nil).MulImm64), arg0, arg1, arg2)
}

// MulUpperSignedSigned mocks base method.
func (m *MockMutator) MulUpperSignedSigned(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MulUpperSignedSigned", arg0, arg1, arg2)
}

// MulUpperSignedSigned indicates an expected call of MulUpperSignedSigned.
func (mr *MockMutatorMockRecorder) MulUpperSignedSigned(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MulUpperSignedSigned", reflect.TypeOf((*MockMutator)(nil).MulUpperSignedSigned), arg0, arg1, arg2)
}

// MulUpperSignedUnsigned mocks base method.
func (m *MockMutator) MulUpperSignedUnsigned(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MulUpperSignedUnsigned", arg0, arg1, arg2)
}

// MulUpperSignedUnsigned indicates an expected call of MulUpperSignedUnsigned.
func (mr *MockMutatorMockRecorder) MulUpperSignedUnsigned(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MulUpperSignedUnsigned", reflect.TypeOf((*MockMutator)(nil).MulUpperSignedUnsigned), arg0, arg1, arg2)
}

// MulUpperUnsignedUnsigned mocks base method.
func (m *MockMutator) MulUpperUnsignedUnsigned(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MulUpperUnsignedUnsigned", arg0, arg1, arg2)
}

// MulUpperUnsignedUnsigned indicates an expected call of MulUpperUnsignedUnsigned.
func (mr *MockMutatorMockRecorder) MulUpperUnsignedUnsigned(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MulUpperUnsignedUnsigned", reflect.TypeOf((*MockMutator)(nil).MulUpperUnsignedUnsigned), arg0, arg1, arg2)
}

// NegateAndAddImm32 mocks base method.
func (m *MockMutator) NegateAndAddImm32(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NegateAndAddImm32", arg0, arg1, arg2)
}

// NegateAndAddImm32 indicates an expected call of NegateAndAddImm32.
func (mr *MockMutatorMockRecorder) NegateAndAddImm32(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NegateAndAddImm32", reflect.TypeOf((*MockMutator)(nil).NegateAndAddImm32), arg0, arg1, arg2)
}

// NegateAndAddImm64 mocks base method.
func (m *MockMutator) NegateAndAddImm64(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NegateAndAddImm64", arg0, arg1, arg2)
}

// NegateAndAddImm64 indicates an expected call of NegateAndAddImm64.
func (mr *MockMutatorMockRecorder) NegateAndAddImm64(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NegateAndAddImm64", reflect.TypeOf((*MockMutator)(nil).NegateAndAddImm64), arg0, arg1, arg2)
}

// Or mocks base method.
func (m *MockMutator) Or(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Or", arg0, arg1, arg2)
}

// Or indicates an expected call of Or.
func (mr *MockMutatorMockRecorder) Or(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Or", reflect.TypeOf((*MockMutator)(nil).Or), arg0, arg1, arg2)
}

// OrImm mocks base method.
func (m *MockMutator) OrImm(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OrImm", arg0, arg1, arg2)
}

// OrImm indicates an expected call of OrImm.
func (mr *MockMutatorMockRecorder) OrImm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrImm", reflect.TypeOf((*MockMutator)(nil).OrImm), arg0, arg1, arg2)
}

// OrInv mocks base method.
func (m *MockMutator) OrInv(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OrInv", arg0, arg1, arg2)
}

// OrInv indicates an expected call of OrInv.
func (mr *MockMutatorMockRecorder) OrInv(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrInv", reflect.TypeOf((*MockMutator)(nil).OrInv), arg0, arg1, arg2)
}

// RemSigned32 mocks base method.
func (m *MockMutator) RemSigned32(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemSigned32", arg0, arg1, arg2)
}

// RemSigned32 indicates an expected call of RemSigned32.
func (mr *MockMutatorMockRecorder) RemSigned32(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemSigned32", reflect.TypeOf((*MockMutator)(nil).RemSigned32), arg0, arg1, arg2)
}

// RemSigned64 mocks base method.
func (m *MockMutator) RemSigned64(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemSigned64", arg0, arg1, arg2)
}

// RemSigned64 indicates an expected call of RemSigned64.
func (mr *MockMutatorMockRecorder) RemSigned64(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemSigned64", reflect.TypeOf((*MockMutator)(nil).RemSigned64), arg0, arg1, arg2)
}

// RemUnsigned32 mocks base method.
func (m *MockMutator) RemUnsigned32(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemUnsigned32", arg0, arg1, arg2)
}

// RemUnsigned32 indicates an expected call of RemUnsigned32.
func (mr *MockMutatorMockRecorder) RemUnsigned32(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemUnsigned32", reflect.TypeOf((*MockMutator)(nil).RemUnsigned32), arg0, arg1, arg2)
}

// RemUnsigned64 mocks base method.
func (m *MockMutator) RemUnsigned64(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemUnsigned64", arg0, arg1, arg2)
}

// RemUnsigned64 indicates an expected call of RemUnsigned64.
func (mr *MockMutatorMockRecorder) RemUnsigned64(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemUnsigned64", reflect.TypeOf((*MockMutator)(nil).RemUnsigned64), arg0, arg1, arg2)
}

// ReverseBytes mocks base method.
func (m *MockMutator) ReverseBytes(arg0, arg1 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReverseBytes", arg0, arg1)
}

// ReverseBytes indicates an expected call of ReverseBytes.
func (mr *MockMutatorMockRecorder) ReverseBytes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReverseBytes", reflect.TypeOf((*MockMutator)(nil).ReverseBytes), arg0, arg1)
}

// RotL32 mocks base method.
func (m *MockMutator) RotL32(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RotL32", arg0, arg1, arg2)
}

// RotL32 indicates an expected call of RotL32.
func (mr *MockMutatorMockRecorder) RotL32(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotL32", reflect.TypeOf((*MockMutator)(nil).RotL32), arg0, arg1, arg2)
}

// RotL64 mocks base method.
func (m *MockMutator) RotL64(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RotL64", arg0, arg1, arg2)
}

// RotL64 indicates an expected call of RotL64.
func (mr *MockMutatorMockRecorder) RotL64(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotL64", reflect.TypeOf((*MockMutator)(nil).RotL64), arg0, arg1, arg2)
}

// RotR32 mocks base method.
func (m *MockMutator) RotR32(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RotR32", arg0, arg1, arg2)
}

// RotR32 indicates an expected call of RotR32.
func (mr *MockMutatorMockRecorder) RotR32(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotR32", reflect.TypeOf((*MockMutator)(nil).RotR32), arg0, arg1, arg2)
}

// RotR32Imm mocks base method.
func (m *MockMutator) RotR32Imm(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RotR32Imm", arg0, arg1, arg2)
}

// RotR32Imm indicates an expected call of RotR32Imm.
func (mr *MockMutatorMockRecorder) RotR32Imm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotR32Imm", reflect.TypeOf((*MockMutator)(nil).RotR32Imm), arg0, arg1, arg2)
}

// RotR32ImmAlt mocks base method.
func (m *MockMutator) RotR32ImmAlt(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RotR32ImmAlt", arg0, arg1, arg2)
}

// RotR32ImmAlt indicates an expected call of RotR32ImmAlt.
func (mr *MockMutatorMockRecorder) RotR32ImmAlt(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotR32ImmAlt", reflect.TypeOf((*MockMutator)(nil).RotR32ImmAlt), arg0, arg1, arg2)
}

// RotR64 mocks base method.
func (m *MockMutator) RotR64(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RotR64", arg0, arg1, arg2)
}

// RotR64 indicates an expected call of RotR64.
func (mr *MockMutatorMockRecorder) RotR64(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotR64", reflect.TypeOf((*MockMutator)(nil).RotR64), arg0, arg1, arg2)
}

// RotR64Imm mocks base method.
func (m *MockMutator) RotR64Imm(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RotR64Imm", arg0, arg1, arg2)
}

// RotR64Imm indicates an expected call of RotR64Imm.
func (mr *MockMutatorMockRecorder) RotR64Imm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotR64Imm", reflect.TypeOf((*MockMutator)(nil).RotR64Imm), arg0, arg1, arg2)
}

// RotR64ImmAlt mocks base method.
func (m *MockMutator) RotR64ImmAlt(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RotR64ImmAlt", arg0, arg1, arg2)
}

// RotR64ImmAlt indicates an expected call of RotR64ImmAlt.
func (mr *MockMutatorMockRecorder) RotR64ImmAlt(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotR64ImmAlt", reflect.TypeOf((*MockMutator)(nil).RotR64ImmAlt), arg0, arg1, arg2)
}

// Sbrk mocks base method.
func (m *MockMutator) Sbrk(arg0, arg1 Reg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sbrk", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Sbrk indicates an expected call of Sbrk.
func (mr *MockMutatorMockRecorder) Sbrk(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sbrk", reflect.TypeOf((*MockMutator)(nil).Sbrk), arg0, arg1)
}

// SetGreaterThanSignedImm mocks base method.
func (m *MockMutator) SetGreaterThanSignedImm(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetGreaterThanSignedImm", arg0, arg1, arg2)
}

// SetGreaterThanSignedImm indicates an expected call of SetGreaterThanSignedImm.
func (mr *MockMutatorMockRecorder) SetGreaterThanSignedImm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGreaterThanSignedImm", reflect.TypeOf((*MockMutator)(nil).SetGreaterThanSignedImm), arg0, arg1, arg2)
}

// SetGreaterThanUnsignedImm mocks base method.
func (m *MockMutator) SetGreaterThanUnsignedImm(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetGreaterThanUnsignedImm", arg0, arg1, arg2)
}

// SetGreaterThanUnsignedImm indicates an expected call of SetGreaterThanUnsignedImm.
func (mr *MockMutatorMockRecorder) SetGreaterThanUnsignedImm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGreaterThanUnsignedImm", reflect.TypeOf((*MockMutator)(nil).SetGreaterThanUnsignedImm), arg0, arg1, arg2)
}

// SetLessThanSigned mocks base method.
func (m *MockMutator) SetLessThanSigned(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLessThanSigned", arg0, arg1, arg2)
}

// SetLessThanSigned indicates an expected call of SetLessThanSigned.
func (mr *MockMutatorMockRecorder) SetLessThanSigned(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLessThanSigned", reflect.TypeOf((*MockMutator)(nil).SetLessThanSigned), arg0, arg1, arg2)
}

// SetLessThanSignedImm mocks base method.
func (m *MockMutator) SetLessThanSignedImm(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLessThanSignedImm", arg0, arg1, arg2)
}

// SetLessThanSignedImm indicates an expected call of SetLessThanSignedImm.
func (mr *MockMutatorMockRecorder) SetLessThanSignedImm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLessThanSignedImm", reflect.TypeOf((*MockMutator)(nil).SetLessThanSignedImm), arg0, arg1, arg2)
}

// SetLessThanUnsigned mocks base method.
func (m *MockMutator) SetLessThanUnsigned(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLessThanUnsigned", arg0, arg1, arg2)
}

// SetLessThanUnsigned indicates an expected call of SetLessThanUnsigned.
func (mr *MockMutatorMockRecorder) SetLessThanUnsigned(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLessThanUnsigned", reflect.TypeOf((*MockMutator)(nil).SetLessThanUnsigned), arg0, arg1, arg2)
}

// SetLessThanUnsignedImm mocks base method.
func (m *MockMutator) SetLessThanUnsignedImm(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLessThanUnsignedImm", arg0, arg1, arg2)
}

// SetLessThanUnsignedImm indicates an expected call of SetLessThanUnsignedImm.
func (mr *MockMutatorMockRecorder) SetLessThanUnsignedImm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLessThanUnsignedImm", reflect.TypeOf((*MockMutator)(nil).SetLessThanUnsignedImm), arg0, arg1, arg2)
}

// ShiftArithmeticRight32 mocks base method.
func (m *MockMutator) ShiftArithmeticRight32(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShiftArithmeticRight32", arg0, arg1, arg2)
}

// ShiftArithmeticRight32 indicates an expected call of ShiftArithmeticRight32.
func (mr *MockMutatorMockRecorder) ShiftArithmeticRight32(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShiftArithmeticRight32", reflect.TypeOf((*MockMutator)(nil).ShiftArithmeticRight32), arg0, arg1, arg2)
}

// ShiftArithmeticRight64 mocks base method.
func (m *MockMutator) ShiftArithmeticRight64(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShiftArithmeticRight64", arg0, arg1, arg2)
}

// ShiftArithmeticRight64 indicates an expected call of ShiftArithmeticRight64.
func (mr *MockMutatorMockRecorder) ShiftArithmeticRight64(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShiftArithmeticRight64", reflect.TypeOf((*MockMutator)(nil).ShiftArithmeticRight64), arg0, arg1, arg2)
}

// ShiftArithmeticRightImm32 mocks base method.
func (m *MockMutator) ShiftArithmeticRightImm32(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShiftArithmeticRightImm32", arg0, arg1, arg2)
}

// ShiftArithmeticRightImm32 indicates an expected call of ShiftArithmeticRightImm32.
func (mr *MockMutatorMockRecorder) ShiftArithmeticRightImm32(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShiftArithmeticRightImm32", reflect.TypeOf((*MockMutator)(nil).ShiftArithmeticRightImm32), arg0, arg1, arg2)
}

// ShiftArithmeticRightImm64 mocks base method.
func (m *MockMutator) ShiftArithmeticRightImm64(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShiftArithmeticRightImm64", arg0, arg1, arg2)
}

// ShiftArithmeticRightImm64 indicates an expected call of ShiftArithmeticRightImm64.
func (mr *MockMutatorMockRecorder) ShiftArithmeticRightImm64(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShiftArithmeticRightImm64", reflect.TypeOf((*MockMutator)(nil).ShiftArithmeticRightImm64), arg0, arg1, arg2)
}

// ShiftArithmeticRightImmAlt32 mocks base method.
func (m *MockMutator) ShiftArithmeticRightImmAlt32(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShiftArithmeticRightImmAlt32", arg0, arg1, arg2)
}

// ShiftArithmeticRightImmAlt32 indicates an expected call of ShiftArithmeticRightImmAlt32.
func (mr *MockMutatorMockRecorder) ShiftArithmeticRightImmAlt32(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShiftArithmeticRightImmAlt32", reflect.TypeOf((*MockMutator)(nil).ShiftArithmeticRightImmAlt32), arg0, arg1, arg2)
}

// ShiftArithmeticRightImmAlt64 mocks base method.
func (m *MockMutator) ShiftArithmeticRightImmAlt64(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShiftArithmeticRightImmAlt64", arg0, arg1, arg2)
}

// ShiftArithmeticRightImmAlt64 indicates an expected call of ShiftArithmeticRightImmAlt64.
func (mr *MockMutatorMockRecorder) ShiftArithmeticRightImmAlt64(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShiftArithmeticRightImmAlt64", reflect.TypeOf((*MockMutator)(nil).ShiftArithmeticRightImmAlt64), arg0, arg1, arg2)
}

// ShiftLogicalLeft32 mocks base method.
func (m *MockMutator) ShiftLogicalLeft32(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShiftLogicalLeft32", arg0, arg1, arg2)
}

// ShiftLogicalLeft32 indicates an expected call of ShiftLogicalLeft32.
func (mr *MockMutatorMockRecorder) ShiftLogicalLeft32(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShiftLogicalLeft32", reflect.TypeOf((*MockMutator)(nil).ShiftLogicalLeft32), arg0, arg1, arg2)
}

// ShiftLogicalLeft64 mocks base method.
func (m *MockMutator) ShiftLogicalLeft64(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShiftLogicalLeft64", arg0, arg1, arg2)
}

// ShiftLogicalLeft64 indicates an expected call of ShiftLogicalLeft64.
func (mr *MockMutatorMockRecorder) ShiftLogicalLeft64(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShiftLogicalLeft64", reflect.TypeOf((*MockMutator)(nil).ShiftLogicalLeft64), arg0, arg1, arg2)
}

// ShiftLogicalLeftImm32 mocks base method.
func (m *MockMutator) ShiftLogicalLeftImm32(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShiftLogicalLeftImm32", arg0, arg1, arg2)
}

// ShiftLogicalLeftImm32 indicates an expected call of ShiftLogicalLeftImm32.
func (mr *MockMutatorMockRecorder) ShiftLogicalLeftImm32(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShiftLogicalLeftImm32", reflect.TypeOf((*MockMutator)(nil).ShiftLogicalLeftImm32), arg0, arg1, arg2)
}

// ShiftLogicalLeftImm64 mocks base method.
func (m *MockMutator) ShiftLogicalLeftImm64(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShiftLogicalLeftImm64", arg0, arg1, arg2)
}

// ShiftLogicalLeftImm64 indicates an expected call of ShiftLogicalLeftImm64.
func (mr *MockMutatorMockRecorder) ShiftLogicalLeftImm64(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShiftLogicalLeftImm64", reflect.TypeOf((*MockMutator)(nil).ShiftLogicalLeftImm64), arg0, arg1, arg2)
}

// ShiftLogicalLeftImmAlt32 mocks base method.
func (m *MockMutator) ShiftLogicalLeftImmAlt32(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShiftLogicalLeftImmAlt32", arg0, arg1, arg2)
}

// ShiftLogicalLeftImmAlt32 indicates an expected call of ShiftLogicalLeftImmAlt32.
func (mr *MockMutatorMockRecorder) ShiftLogicalLeftImmAlt32(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShiftLogicalLeftImmAlt32", reflect.TypeOf((*MockMutator)(nil).ShiftLogicalLeftImmAlt32), arg0, arg1, arg2)
}

// ShiftLogicalLeftImmAlt64 mocks base method.
func (m *MockMutator) ShiftLogicalLeftImmAlt64(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShiftLogicalLeftImmAlt64", arg0, arg1, arg2)
}

// ShiftLogicalLeftImmAlt64 indicates an expected call of ShiftLogicalLeftImmAlt64.
func (mr *MockMutatorMockRecorder) ShiftLogicalLeftImmAlt64(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShiftLogicalLeftImmAlt64", reflect.TypeOf((*MockMutator)(nil).ShiftLogicalLeftImmAlt64), arg0, arg1, arg2)
}

// ShiftLogicalRight32 mocks base method.
func (m *MockMutator) ShiftLogicalRight32(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShiftLogicalRight32", arg0, arg1, arg2)
}

// ShiftLogicalRight32 indicates an expected call of ShiftLogicalRight32.
func (mr *MockMutatorMockRecorder) ShiftLogicalRight32(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShiftLogicalRight32", reflect.TypeOf((*MockMutator)(nil).ShiftLogicalRight32), arg0, arg1, arg2)
}

// ShiftLogicalRight64 mocks base method.
func (m *MockMutator) ShiftLogicalRight64(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShiftLogicalRight64", arg0, arg1, arg2)
}

// ShiftLogicalRight64 indicates an expected call of ShiftLogicalRight64.
func (mr *MockMutatorMockRecorder) ShiftLogicalRight64(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShiftLogicalRight64", reflect.TypeOf((*MockMutator)(nil).ShiftLogicalRight64), arg0, arg1, arg2)
}

// ShiftLogicalRightImm32 mocks base method.
func (m *MockMutator) ShiftLogicalRightImm32(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShiftLogicalRightImm32", arg0, arg1, arg2)
}

// ShiftLogicalRightImm32 indicates an expected call of ShiftLogicalRightImm32.
func (mr *MockMutatorMockRecorder) ShiftLogicalRightImm32(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShiftLogicalRightImm32", reflect.TypeOf((*MockMutator)(nil).ShiftLogicalRightImm32), arg0, arg1, arg2)
}

// ShiftLogicalRightImm64 mocks base method.
func (m *MockMutator) ShiftLogicalRightImm64(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShiftLogicalRightImm64", arg0, arg1, arg2)
}

// ShiftLogicalRightImm64 indicates an expected call of ShiftLogicalRightImm64.
func (mr *MockMutatorMockRecorder) ShiftLogicalRightImm64(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShiftLogicalRightImm64", reflect.TypeOf((*MockMutator)(nil).ShiftLogicalRightImm64), arg0, arg1, arg2)
}

// ShiftLogicalRightImmAlt32 mocks base method.
func (m *MockMutator) ShiftLogicalRightImmAlt32(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShiftLogicalRightImmAlt32", arg0, arg1, arg2)
}

// ShiftLogicalRightImmAlt32 indicates an expected call of ShiftLogicalRightImmAlt32.
func (mr *MockMutatorMockRecorder) ShiftLogicalRightImmAlt32(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShiftLogicalRightImmAlt32", reflect.TypeOf((*MockMutator)(nil).ShiftLogicalRightImmAlt32), arg0, arg1, arg2)
}

// ShiftLogicalRightImmAlt64 mocks base method.
func (m *MockMutator) ShiftLogicalRightImmAlt64(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ShiftLogicalRightImmAlt64", arg0, arg1, arg2)
}

// ShiftLogicalRightImmAlt64 indicates an expected call of ShiftLogicalRightImmAlt64.
func (mr *MockMutatorMockRecorder) ShiftLogicalRightImmAlt64(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShiftLogicalRightImmAlt64", reflect.TypeOf((*MockMutator)(nil).ShiftLogicalRightImmAlt64), arg0, arg1, arg2)
}

// SignExtend16 mocks base method.
func (m *MockMutator) SignExtend16(arg0, arg1 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SignExtend16", arg0, arg1)
}

// SignExtend16 indicates an expected call of SignExtend16.
func (mr *MockMutatorMockRecorder) SignExtend16(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignExtend16", reflect.TypeOf((*MockMutator)(nil).SignExtend16), arg0, arg1)
}

// SignExtend8 mocks base method.
func (m *MockMutator) SignExtend8(arg0, arg1 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SignExtend8", arg0, arg1)
}

// SignExtend8 indicates an expected call of SignExtend8.
func (mr *MockMutatorMockRecorder) SignExtend8(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignExtend8", reflect.TypeOf((*MockMutator)(nil).SignExtend8), arg0, arg1)
}

// StoreImmIndirectU16 mocks base method.
func (m *MockMutator) StoreImmIndirectU16(arg0 Reg, arg1, arg2 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreImmIndirectU16", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreImmIndirectU16 indicates an expected call of StoreImmIndirectU16.
func (mr *MockMutatorMockRecorder) StoreImmIndirectU16(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreImmIndirectU16", reflect.TypeOf((*MockMutator)(nil).StoreImmIndirectU16), arg0, arg1, arg2)
}

// StoreImmIndirectU32 mocks base method.
func (m *MockMutator) StoreImmIndirectU32(arg0 Reg, arg1, arg2 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreImmIndirectU32", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreImmIndirectU32 indicates an expected call of StoreImmIndirectU32.
func (mr *MockMutatorMockRecorder) StoreImmIndirectU32(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreImmIndirectU32", reflect.TypeOf((*MockMutator)(nil).StoreImmIndirectU32), arg0, arg1, arg2)
}

// StoreImmIndirectU64 mocks base method.
func (m *MockMutator) StoreImmIndirectU64(arg0 Reg, arg1, arg2 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreImmIndirectU64", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreImmIndirectU64 indicates an expected call of StoreImmIndirectU64.
func (mr *MockMutatorMockRecorder) StoreImmIndirectU64(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreImmIndirectU64", reflect.TypeOf((*MockMutator)(nil).StoreImmIndirectU64), arg0, arg1, arg2)
}

// StoreImmIndirectU8 mocks base method.
func (m *MockMutator) StoreImmIndirectU8(arg0 Reg, arg1, arg2 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreImmIndirectU8", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreImmIndirectU8 indicates an expected call of StoreImmIndirectU8.
func (mr *MockMutatorMockRecorder) StoreImmIndirectU8(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreImmIndirectU8", reflect.TypeOf((*MockMutator)(nil).StoreImmIndirectU8), arg0, arg1, arg2)
}

// StoreImmU16 mocks base method.
func (m *MockMutator) StoreImmU16(arg0, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreImmU16", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreImmU16 indicates an expected call of StoreImmU16.
func (mr *MockMutatorMockRecorder) StoreImmU16(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreImmU16", reflect.TypeOf((*MockMutator)(nil).StoreImmU16), arg0, arg1)
}

// StoreImmU32 mocks base method.
func (m *MockMutator) StoreImmU32(arg0, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreImmU32", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreImmU32 indicates an expected call of StoreImmU32.
func (mr *MockMutatorMockRecorder) StoreImmU32(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreImmU32", reflect.TypeOf((*MockMutator)(nil).StoreImmU32), arg0, arg1)
}

// StoreImmU64 mocks base method.
func (m *MockMutator) StoreImmU64(arg0, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreImmU64", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreImmU64 indicates an expected call of StoreImmU64.
func (mr *MockMutatorMockRecorder) StoreImmU64(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreImmU64", reflect.TypeOf((*MockMutator)(nil).StoreImmU64), arg0, arg1)
}

// StoreImmU8 mocks base method.
func (m *MockMutator) StoreImmU8(arg0, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreImmU8", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreImmU8 indicates an expected call of StoreImmU8.
func (mr *MockMutatorMockRecorder) StoreImmU8(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreImmU8", reflect.TypeOf((*MockMutator)(nil).StoreImmU8), arg0, arg1)
}

// StoreIndirectU16 mocks base method.
func (m *MockMutator) StoreIndirectU16(arg0, arg1 Reg, arg2 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreIndirectU16", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreIndirectU16 indicates an expected call of StoreIndirectU16.
func (mr *MockMutatorMockRecorder) StoreIndirectU16(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreIndirectU16", reflect.TypeOf((*MockMutator)(nil).StoreIndirectU16), arg0, arg1, arg2)
}

// StoreIndirectU32 mocks base method.
func (m *MockMutator) StoreIndirectU32(arg0, arg1 Reg, arg2 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreIndirectU32", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreIndirectU32 indicates an expected call of StoreIndirectU32.
func (mr *MockMutatorMockRecorder) StoreIndirectU32(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreIndirectU32", reflect.TypeOf((*MockMutator)(nil).StoreIndirectU32), arg0, arg1, arg2)
}

// StoreIndirectU64 mocks base method.
func (m *MockMutator) StoreIndirectU64(arg0, arg1 Reg, arg2 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreIndirectU64", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreIndirectU64 indicates an expected call of StoreIndirectU64.
func (mr *MockMutatorMockRecorder) StoreIndirectU64(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreIndirectU64", reflect.TypeOf((*MockMutator)(nil).StoreIndirectU64), arg0, arg1, arg2)
}

// StoreIndirectU8 mocks base method.
func (m *MockMutator) StoreIndirectU8(arg0, arg1 Reg, arg2 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreIndirectU8", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreIndirectU8 indicates an expected call of StoreIndirectU8.
func (mr *MockMutatorMockRecorder) StoreIndirectU8(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreIndirectU8", reflect.TypeOf((*MockMutator)(nil).StoreIndirectU8), arg0, arg1, arg2)
}

// StoreU16 mocks base method.
func (m *MockMutator) StoreU16(arg0 Reg, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreU16", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreU16 indicates an expected call of StoreU16.
func (mr *MockMutatorMockRecorder) StoreU16(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreU16", reflect.TypeOf((*MockMutator)(nil).StoreU16), arg0, arg1)
}

// StoreU32 mocks base method.
func (m *MockMutator) StoreU32(arg0 Reg, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreU32", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreU32 indicates an expected call of StoreU32.
func (mr *MockMutatorMockRecorder) StoreU32(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreU32", reflect.TypeOf((*MockMutator)(nil).StoreU32), arg0, arg1)
}

// StoreU64 mocks base method.
func (m *MockMutator) StoreU64(arg0 Reg, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreU64", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreU64 indicates an expected call of StoreU64.
func (mr *MockMutatorMockRecorder) StoreU64(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreU64", reflect.TypeOf((*MockMutator)(nil).StoreU64), arg0, arg1)
}

// StoreU8 mocks base method.
func (m *MockMutator) StoreU8(arg0 Reg, arg1 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreU8", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreU8 indicates an expected call of StoreU8.
func (mr *MockMutatorMockRecorder) StoreU8(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreU8", reflect.TypeOf((*MockMutator)(nil).StoreU8), arg0, arg1)
}

// Sub32 mocks base method.
func (m *MockMutator) Sub32(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Sub32", arg0, arg1, arg2)
}

// Sub32 indicates an expected call of Sub32.
func (mr *MockMutatorMockRecorder) Sub32(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sub32", reflect.TypeOf((*MockMutator)(nil).Sub32), arg0, arg1, arg2)
}

// Sub64 mocks base method.
func (m *MockMutator) Sub64(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Sub64", arg0, arg1, arg2)
}

// Sub64 indicates an expected call of Sub64.
func (mr *MockMutatorMockRecorder) Sub64(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sub64", reflect.TypeOf((*MockMutator)(nil).Sub64), arg0, arg1, arg2)
}

// TrailingZeroBits32 mocks base method.
func (m *MockMutator) TrailingZeroBits32(arg0, arg1 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TrailingZeroBits32", arg0, arg1)
}

// TrailingZeroBits32 indicates an expected call of TrailingZeroBits32.
func (mr *MockMutatorMockRecorder) TrailingZeroBits32(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrailingZeroBits32", reflect.TypeOf((*MockMutator)(nil).TrailingZeroBits32), arg0, arg1)
}

// TrailingZeroBits64 mocks base method.
func (m *MockMutator) TrailingZeroBits64(arg0, arg1 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TrailingZeroBits64", arg0, arg1)
}

// TrailingZeroBits64 indicates an expected call of TrailingZeroBits64.
func (mr *MockMutatorMockRecorder) TrailingZeroBits64(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrailingZeroBits64", reflect.TypeOf((*MockMutator)(nil).TrailingZeroBits64), arg0, arg1)
}

// Trap mocks base method.
func (m *MockMutator) Trap() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trap")
	ret0, _ := ret[0].(error)
	return ret0
}

// Trap indicates an expected call of Trap.
func (mr *MockMutatorMockRecorder) Trap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trap", reflect.TypeOf((*MockMutator)(nil).Trap))
}

// Xnor mocks base method.
func (m *MockMutator) Xnor(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Xnor", arg0, arg1, arg2)
}

// Xnor indicates an expected call of Xnor.
func (mr *MockMutatorMockRecorder) Xnor(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Xnor", reflect.TypeOf((*MockMutator)(nil).Xnor), arg0, arg1, arg2)
}

// Xor mocks base method.
func (m *MockMutator) Xor(arg0, arg1, arg2 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Xor", arg0, arg1, arg2)
}

// Xor indicates an expected call of Xor.
func (mr *MockMutatorMockRecorder) Xor(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Xor", reflect.TypeOf((*MockMutator)(nil).Xor), arg0, arg1, arg2)
}

// XorImm mocks base method.
func (m *MockMutator) XorImm(arg0, arg1 Reg, arg2 uint32) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "XorImm", arg0, arg1, arg2)
}

// XorImm indicates an expected call of XorImm.
func (mr *MockMutatorMockRecorder) XorImm(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XorImm", reflect.TypeOf((*MockMutator)(nil).XorImm), arg0, arg1, arg2)
}

// ZeroExtend16 mocks base method.
func (m *MockMutator) ZeroExtend16(arg0, arg1 Reg) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ZeroExtend16", arg0, arg1)
}

// ZeroExtend16 indicates an expected call of ZeroExtend16.
func (mr *MockMutatorMockRecorder) ZeroExtend16(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ZeroExtend16", reflect.TypeOf((*MockMutator)(nil).ZeroExtend16), arg0, arg1)
}
